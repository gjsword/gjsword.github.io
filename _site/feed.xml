<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>剑首一吷</title>
    <description>Welcome！</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Jul 2019 19:15:57 +0800</pubDate>
    <lastBuildDate>Mon, 22 Jul 2019 19:15:57 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Redis 基础</title>
        <description>&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;

&lt;p&gt;1.底层实现：
SDS:
区别于C语言的字符数组，额外增加了len，free信息。
可以O(1)复杂度获取长度；
分配空间更加合理；
防止缓冲区溢出；
减少重新分配内存的次数；
空间预分配；
惰性释放；
二进制安全&lt;/p&gt;

&lt;p&gt;链表:
双向链表；列表键值对的底层实现之一；&lt;/p&gt;

&lt;p&gt;字典：
就是一个Map，用于redis的数据库，同时是哈希键值对的底层实现之一；结构如下：
typedef struct dict {
    dictType &lt;em&gt;type;
    void *privdata;
    dictht ht[2];
    long rehashidx; /&lt;/em&gt; rehashing not in progress if rehashidx == -1 &lt;em&gt;/
    unsigned long iterators; /&lt;/em&gt; number of iterators currently running */
} dict;&lt;/p&gt;

&lt;p&gt;每一个字典都由上述结构组成；
其中type和privdata是为了多态而设置的；
ht[2]；是每个字典对象都有两个哈希表;
rehashidx表示的时渐进式rehash的标记；
字典的数据，维护在dictht中，结构如下：
typedef struct dictht {
    dictEntry **table;
    unsigned long size;
    unsigned long sizemask;
    unsigned long used;
} dictht;&lt;/p&gt;

&lt;p&gt;每个字典对象都由以上结构组成，其中，table指向了一个数组，数组中的每一项都是一个指向DictEntry的指针，使用拉链法来处理冲突；&lt;/p&gt;

&lt;p&gt;哈希算法：hash=dict-&amp;gt;type-&amp;gt;hashFunction(key);index=hash^sizemask;&lt;/p&gt;

&lt;p&gt;跳跃表：
先扯句题外话：
有点像日本电车的路线图。
最上边是最快速的通道，最下边是最慢速的。同一个节点，有两个指针（redis实现时，并没有使用两个指针，而是同一个节点使用了一个指向右侧的指针数组），一个指向下，一个指向右。&lt;/p&gt;

&lt;p&gt;跳跃表中会保持根据score来排序，定义在zskipList和zskipListNode中：
/* ZSETs use a specialized version of Skiplists */
typedef struct zskiplistNode {
    sds ele;
    double score;
    struct zskiplistNode *backward;
    struct zskiplistLevel {
        struct zskiplistNode *forward;
        unsigned long span;
    } level[];
} zskiplistNode;&lt;/p&gt;

&lt;p&gt;typedef struct zskiplist {
    struct zskiplistNode *header, *tail;
    unsigned long length;
    int level;
} zskiplist;&lt;/p&gt;

&lt;p&gt;按照score排序，score相当，按key的ascii排序。
初始化时，会生成一个zskipList和一头节点zskipListNode.
头节点高32层，但算整体的level和length时，均不算header节点。
rank:排位，指的节点到头结点的距离。
span,当前节点到同一层下个节点之间的距离（rank差）&lt;/p&gt;

&lt;p&gt;每新插入一个节点，会随机生成一个1-32的层数（数字越大，概率越小，power law）。
curd的平均效率均未O(logN),最坏为O(N).
最后附上insert的代码理解，span部分有些问题，先理解到这里：
zskiplistNode *zslInsert(zskiplist *zsl, double score, sds ele) {
    zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;//update 记录的时每层的前驱节点
    // rank 用于标记插入节点在每层的前驱节点得排序
    unsigned int rank[ZSKIPLIST_MAXLEVEL];//rank记录的是排序，span的总和
    int i, level;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverAssert(!isnan(score));
x = zsl-&amp;gt;header;
for (i = zsl-&amp;gt;level-1; i &amp;gt;= 0; i--) {
    /* store rank that is crossed to reach the insert position */
    rank[i] = i == (zsl-&amp;gt;level-1) ? 0 : rank[i+1];
    //从最高层开始向下找，当前处于最高层时，第一个节点一定是表头节点，
    //如果不是最高层，为什么从rank[i+1]开始 ？
    //原因是，rank[i+1]节点一定是小于当前值，并且i层的点更多，可能出现比rank[i+1]更大但是比score小的节点。
    while (x-&amp;gt;level[i].forward &amp;amp;&amp;amp;
            (x-&amp;gt;level[i].forward-&amp;gt;score &amp;lt; score ||
                (x-&amp;gt;level[i].forward-&amp;gt;score == score &amp;amp;&amp;amp;
                sdscmp(x-&amp;gt;level[i].forward-&amp;gt;ele,ele) &amp;lt; 0)))
    {
        rank[i] += x-&amp;gt;level[i].span;
        x = x-&amp;gt;level[i].forward;
    }
    update[i] = x;
}
/* we assume the element is not already inside, since we allow duplicated
 * scores, reinserting the same element should never happen since the
 * caller of zslInsert() should test in the hash table if the element is
 * already inside or not. */
level = zslRandomLevel();
if (level &amp;gt; zsl-&amp;gt;level) {
    for (i = zsl-&amp;gt;level; i &amp;lt; level; i++) {
        //如果新生成的节点是最高，则将之前的最高层以上的rank的前驱节点都设置成表头节点
        rank[i] = 0;
        update[i] = zsl-&amp;gt;header;
        update[i]-&amp;gt;level[i].span = zsl-&amp;gt;length;//这是个默认值，后续会修改[1]
    }
    zsl-&amp;gt;level = level;
}
x = zslCreateNode(level,score,ele);
for (i = 0; i &amp;lt; level; i++) {
    x-&amp;gt;level[i].forward = update[i]-&amp;gt;level[i].forward;
    update[i]-&amp;gt;level[i].forward = x;

    /* update span covered by update[i] as x is inserted here */

    // x的在i层的span计算逻辑：
    // 前驱节点到后驱节点的span为update[i]-&amp;gt;level[i].span，中间加上了一个x节点，因此span为update[i]-&amp;gt;level[i].span+!;
    // 前驱节点到x得距离为(rank[0] - rank[i]) + 1(逻辑见下方update[i]-&amp;gt;level[i].span = (rank[0] - rank[i]) + 1;);
    // 因此x到后继节点的span为update[i]-&amp;gt;level[i].span +1-(rank[0] - rank[i]) + 1;)=update[i]-&amp;gt;level[i].span - (rank[0] - rank[i]);
    x-&amp;gt;level[i].span = update[i]-&amp;gt;level[i].span - (rank[0] - rank[i]);
    //第0层的前驱节点距离x的距离是1。
    //第i层的前驱节点的排序是rank[i],距离第0层的前驱节点的span时rank[0]-rank[i],因此第i层的前驱节点到x得距离为rank[0]-rank[i]+1
    update[i]-&amp;gt;level[i].span = (rank[0] - rank[i]) + 1;
    //[1] 对于level比zsl-&amp;gt;level更高的case，默认情况前驱节点是head.span是zsl的length，rank[i]=0;
    //这种情况，会直接将对应的前驱节点(head)的span设置为rank[0]+1;
    //前驱节点（head）的span的计算方式没问题，
    //不过当前插入的x节点的i成应该是最后一个节点，forward应该指向null，此时为什么没有设置span，有些疑惑，难道是改了算法 ？
    //有一种可能是在用的时候，如果判断forward是null，直接将span当做0来用，而不是在这里设置
}

/* increment span for untouched levels */
// 比当前节点更高层的前驱节点，因为当前节点的插入，span也增加了。
for (i = level; i &amp;lt; zsl-&amp;gt;level; i++) {
    update[i]-&amp;gt;level[i].span++;
}
//最前
x-&amp;gt;backward = (update[0] == zsl-&amp;gt;header) ? NULL : update[0];


if (x-&amp;gt;level[0].forward)//不是最后
    x-&amp;gt;level[0].forward-&amp;gt;backward = x;
else//最后
    zsl-&amp;gt;tail = x;
zsl-&amp;gt;length++;
return x; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;整数集合：
是集合键值对的底层实现之一，当集合键值对的集合仅包含整数，且数量不多时，redis使用整数集合来做底层实现；
整数集合底层存储时候，保持有序；
typedef struct intset {
    uint32_t encoding;
    uint32_t length;
    int8_t contents[];
} intset;&lt;/p&gt;

&lt;p&gt;encoding 表示contents数组的类型，length表示contents的长度，contents存储真正的数据；
当新增的数据长度大于目前contents的长度时，会进行升级，重新申请contents，重新对目前的contents进行赋值；
但不会降级；&lt;/p&gt;

&lt;p&gt;压缩列表：
实际是连续内存块，为了节约内存而编写的；列表键和哈希键的实现方式之一；当列表键的每一项都是小整数或短字符串（哈希键只包含少量键值对，且每个键值对的值为小数字或短字符串时）可以使用压缩列表来实现；&lt;/p&gt;

&lt;p&gt;2.对象
redis没有直接使用上述的数据结构来实现键值对数据库，而是基于上述结构构建了一个对象系统，包括：字符串对象，列表，哈希对象，集合对象，有序集合对象5中对象；&lt;/p&gt;

&lt;p&gt;每个对象都使用一个redisObject结构来表示，有三个属性，type，encoding，ptr：&lt;/p&gt;

&lt;p&gt;typedef struct redisObject {
    unsigned type:4;
    unsigned encoding:4;
    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */
    int refcount;
    void *ptr;
} robj;&lt;/p&gt;

&lt;p&gt;首先，
type：
是指 字符串对象，列表，哈希对象，集合对象，有序集合对象 中的一种。分别用REDIS_STRING,REDIS_LIST,REDIS_HASH,REDIS_SET,REDIS_ZSET来进行表示。
可以使用  type key 命令来查看对应的对象类型。&lt;/p&gt;

&lt;p&gt;encoding、ptr&lt;/p&gt;

&lt;p&gt;对象的ptr志向的底层实现数据结构，具体指向什么底层结构，具体由encoding决定，同时每一种对象都至少有2种的encoding，每种encoding又分别对应了一种底层结构。&lt;/p&gt;

&lt;p&gt;使用object encoding可以查看对象的encoding。&lt;/p&gt;

&lt;p&gt;字符串对象
字符串对象的encoding可以为int（使用long实现），embstr（使用embstr编码的sds），raw（sds）
如果字符串对象可以使用long来表示，则encoding设置为int，并且将*ptr转换成long，直接将值赋值到ptr属性。
如果字符对象保存的是一个字符串值，并且字符串为39字节以上，那么此时ptr指向的是一个sds对象，此时encoding为raw：&lt;/p&gt;

&lt;p&gt;如果保存的字符串长度小于等于39字节。则使用embstr，embstr仍然和raw一样，由redisObject和sdshdr对象组成，只不过是分别一次一块连续的内存（上图）。&lt;/p&gt;

&lt;p&gt;embstr优势在于：
申请和释放均只需要一次；空间连续，更好地利用缓存带来的优势&lt;/p&gt;

&lt;p&gt;另外浮点数类型long double也使用raw/embstr来存储。需要操作时，先将raw/embstr转换为浮点数进行操作后，存储时再转化为raw/embstr。
总结下：&lt;/p&gt;

&lt;p&gt;值	编码
long整数
int
long double可以表示的浮点数	
raw/embstr
字符串值，无法用long表示的整数，无法用long double表示的浮点	
raw/embstr&lt;/p&gt;

&lt;p&gt;code转换的问题：
int如果被修改成功字符串值，会将encoding转换为raw。
另外embstr没有提供任何修改的方法，因此任何embstr的值被修改时，总会先转换成raw再进行转换。&lt;/p&gt;

&lt;p&gt;列表对象（type是list，encoding是zipList或linkedList，新版本redis已统一为quickList）&lt;/p&gt;

&lt;p&gt;列表的底层实现，可以是linkedList或者zipList。
127.0.0.1:6379&amp;gt; rpush nums 1 “three” 5
(integer) 3&lt;/p&gt;

&lt;p&gt;如果采用的时zipList存储，则格式为：&lt;/p&gt;

&lt;p&gt;如果采用linkeList存储，格式为：&lt;/p&gt;

&lt;p&gt;这里的StringObject为字符串对象，是一个redisObject。&lt;/p&gt;

&lt;p&gt;什么时候使用zipList？
两个条件，元素个数少于512个，每个元素小于64字节。
如果不满足，会被转换为linkedList。&lt;/p&gt;

&lt;p&gt;哈希对象
哈希对象的实现是zipList或者字典.
当实现为字典时，redisObject的ptr指向一个字典对象。&lt;/p&gt;

&lt;p&gt;每一个键值对存在dictEntry中（应该是key和val都指向一个stringObject[embstr.raw]）。&lt;/p&gt;

&lt;p&gt;当实现为zipList时，ptr指向一个zipList，此次存入key-value&lt;/p&gt;

&lt;p&gt;编码转换：
当键值对个数少于512并且每个键值对长度小于64字节时，使用zipList。否则使用dict。&lt;/p&gt;

&lt;p&gt;集合对象：
集合对象的底层实现，可以是使用简单的intset，也可以使用hashTable
如果使用的时intset，则要保证保存的元素都是数字，并且数量不超过512个。&lt;/p&gt;

&lt;p&gt;当使用字典来完成时，其做法和java中的hashset一样，只在字典中保存key，value设置为null，这里对于在字典的工作原理，上边已经说过，不再赘述。&lt;/p&gt;

&lt;p&gt;有序集合：
底层可实现。以使用压缩列表或跳表
使用压缩列表，zipList，这种case下压缩列表一次保存值和score，并按score进行排列&lt;/p&gt;

&lt;p&gt;如果使用zset，zset由一个hashtable和一个skipList&lt;/p&gt;

&lt;p&gt;typedef struct zset {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zskiplist *zsl;

dict *dict;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;} zset;&lt;/p&gt;

&lt;p&gt;HashTable用户根据成员来查找分值，但对于排序的操作处理慢
使用skipList，可以快速的做排序查找等操作。
两者进行互补。另外两种数据结构上hi用的StringObject是公用的，也就是说，两中数据结构仅仅是多使用了一些指针（这种方法比较类似于java中的LinkedhashMap）&lt;/p&gt;

&lt;p&gt;当有序集合对象可以同时满足以下两个条件时， 对象使用 ziplist 编码：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;有序集合保存的元素数量小于 128 个；&lt;/li&gt;
  &lt;li&gt;有序集合保存的所有元素成员的长度都小于 64 字节；&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;类型检查与命令多态&lt;/p&gt;

&lt;p&gt;redis命令分两种，一种是对所有类型都ok的，比如del，expire，rename，type，object等
127.0.0.1:6379&amp;gt; type msg
string
127.0.0.1:6379&amp;gt; object encoding msg
“embstr”
127.0.0.1:6379&amp;gt; rpush members 1 2 3
(integer) 3
127.0.0.1:6379&amp;gt; sadd fruit apple banana cherry
(integer) 3
127.0.0.1:6379&amp;gt; del msg
(integer) 1
127.0.0.1:6379&amp;gt; del members
(integer) 1
127.0.0.1:6379&amp;gt; del fruit
(integer) 1
127.0.0.1:6379&amp;gt;&lt;/p&gt;

&lt;p&gt;另一种是只能对特定类型使用：而另一种命令只能对特定类型的键执行， 比如说：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SET 、 GET 、 APPEND 、 STRLEN 等命令只能对字符串键执行；&lt;/li&gt;
  &lt;li&gt;HDEL 、 HSET 、 HGET 、 HLEN 等命令只能对哈希键执行；&lt;/li&gt;
  &lt;li&gt;RPUSH 、 LPOP 、 LINSERT 、 LLEN 等命令只能对列表键执行；&lt;/li&gt;
  &lt;li&gt;SADD 、 SPOP 、 SINTER 、 SCARD 等命令只能对集合键执行；&lt;/li&gt;
  &lt;li&gt;ZADD 、 ZCARD 、 ZRANK 、 ZSCORE 等命令只能对有序集合键执行；
诸如此类。
举个例子， 我们可以用 SET 命令创建一个字符串键， 然后用 GET 命令和 APPEND 命令操作这个键， 但如果我们试图对这个字符串键执行只有列表键才能执行的 LLEN 命令， 那么 Redis 将向我们返回一个类型错误：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;redis&amp;gt; SET msg “hello world”
OK&lt;/p&gt;

&lt;p&gt;redis&amp;gt; GET msg
“hello world”&lt;/p&gt;

&lt;p&gt;redis&amp;gt; APPEND msg “ again!”
(integer) 18&lt;/p&gt;

&lt;p&gt;redis&amp;gt; GET msg
“hello world again!”&lt;/p&gt;

&lt;p&gt;redis&amp;gt; LLEN msg
(error) WRONGTYPE Operation against a key holding the wrong kind of value&lt;/p&gt;

&lt;p&gt;类型检查：
从上面发生类型错误的代码示例可以看出， 为了确保只有指定类型的键可以执行某些特定的命令， 在执行一个类型特定的命令之前， Redis 会先检查输入键的类型是否正确， 然后再决定是否执行给定的命令。
类型特定命令所进行的类型检查是通过 redisObject 结构的 type 属性来实现的：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在执行一个类型特定命令之前， 服务器会先检查输入数据库键的值对象是否为执行命令所需的类型， 如果是的话， 服务器就对键执行指定的命令；&lt;/li&gt;
  &lt;li&gt;否则， 服务器将拒绝执行命令， 并向客户端返回一个类型错误。
举个例子， 对于 LLEN 命令来说：&lt;/li&gt;
  &lt;li&gt;在执行 LLEN 命令之前， 服务器会先检查输入数据库键的值对象是否为列表类型， 也即是， 检查值对象 redisObject 结构 type 属性的值是否为 REDIS_LIST ， 如果是的话， 服务器就对键执行 LLEN 命令；&lt;/li&gt;
  &lt;li&gt;否则的话， 服务器就拒绝执行命令并向客户端返回一个类型错误；
图 8-18 展示了这一类型检查过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令多态：
Redis 除了会根据值对象的类型来判断键是否能够执行指定命令之外， 还会根据值对象的编码方式， 选择正确的命令实现代码来执行命令。
举个例子， 在前面介绍列表对象的编码时我们说过， 列表对象有 ziplist 和 linkedlist 两种编码可用， 其中前者使用压缩列表 API 来实现列表命令， 而后者则使用双端链表 API 来实现列表命令。
现在， 考虑这样一个情况， 如果我们对一个键执行 LLEN 命令， 那么服务器除了要确保执行命令的是列表键之外， 还需要根据键的值对象所使用的编码来选择正确的 LLEN 命令实现：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果列表对象的编码为 ziplist ， 那么说明列表对象的实现为压缩列表， 程序将使用 ziplistLen 函数来返回列表的长度；&lt;/li&gt;
  &lt;li&gt;如果列表对象的编码为 linkedlist ， 那么说明列表对象的实现为双端链表， 程序将使用 listLength 函数来返回双端链表的长度；
借用面向对象方面的术语来说， 我们可以认为 LLEN 命令是多态（polymorphism）的： 只要执行 LLEN 命令的是列表键， 那么无论值对象使用的是 ziplist 编码还是 linkedlist 编码， 命令都可以正常执行。
图 8-19 展示了 LLEN 命令从类型检查到根据编码选择实现函数的整个执行过程， 其他类型特定命令的执行过程也是类似的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引用计数：
因为 C 语言并不具备自动的内存回收功能， 所以 Redis 在自己的对象系统中构建了一个引用计数（reference counting）技术实现的内存回收机制， 通过这一机制， 程序可以通过跟踪对象的引用计数信息， 在适当的时候自动释放对象并进行内存回收。
每个对象的引用计数信息由 redisObject 结构的 refcount 属性记录：
typedef struct redisObject {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ...

// 引用计数
int refcount;

// ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;} robj;&lt;/p&gt;

&lt;p&gt;对象的引用计数信息会随着对象的使用状态而不断变化：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在创建一个新对象时， 引用计数的值会被初始化为 1 ；&lt;/li&gt;
  &lt;li&gt;当对象被一个新程序使用时， 它的引用计数值会被增一；&lt;/li&gt;
  &lt;li&gt;当对象不再被一个程序使用时， 它的引用计数值会被减一；&lt;/li&gt;
  &lt;li&gt;当对象的引用计数值变为 0 时， 对象所占用的内存会被释放。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// 创建一个字符串对象 s ，对象的引用计数为 1
robj *s = createStringObject(…)&lt;/p&gt;

&lt;p&gt;// 对象 s 执行各种操作 …&lt;/p&gt;

&lt;p&gt;// 将对象 s 的引用计数减一，使得对象的引用计数变为 0
// 导致对象 s 被释放
decrRefCount(s)&lt;/p&gt;

&lt;p&gt;对象共享&lt;/p&gt;

&lt;p&gt;除了用于实现引用计数内存回收机制之外， 对象的引用计数属性还带有对象共享的作用。
举个例子， 假设键 A 创建了一个包含整数值 100 的字符串对象作为值对象， 如图 8-20 所示。&lt;/p&gt;

&lt;p&gt;如果这时键 B 也要创建一个同样保存了整数值 100 的字符串对象作为值对象， 那么服务器有以下两种做法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;为键 B 新创建一个包含整数值 100 的字符串对象；&lt;/li&gt;
  &lt;li&gt;让键 A 和键 B 共享同一个字符串对象；
以上两种方法很明显是第二种方法更节约内存。
在 Redis 中， 让多个键共享同一个值对象需要执行以下两个步骤：&lt;/li&gt;
  &lt;li&gt;将数据库键的值指针指向一个现有的值对象；&lt;/li&gt;
  &lt;li&gt;将被共享的值对象的引用计数增一。
举个例子， 图 8-21 就展示了包含整数值 100 的字符串对象同时被键 A 和键 B 共享之后的样子， 可以看到， 除了对象的引用计数从之前的 1 变成了 2 之外， 其他属性都没有变化。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;共享对象机制对于节约内存非常有帮助， 数据库中保存的相同值对象越多， 对象共享机制就能节约越多的内存。
比如说， 假设数据库中保存了整数值 100 的键不只有键 A 和键 B 两个， 而是有一百个， 那么服务器只需要用一个字符串对象的内存就可以保存原本需要使用一百个字符串对象的内存才能保存的数据。
目前来说， Redis 会在初始化服务器时， 创建一万个字符串对象， 这些对象包含了从 0 到 9999 的所有整数值， 当服务器需要用到值为 0到 9999 的字符串对象时， 服务器就会使用这些共享对象， 而不是新创建对象。&lt;/p&gt;

&lt;p&gt;注意！！！！！：
如果某个对象的encoding为‘int‘，并且这个对象的值在0-9999之间，那么他的refcount引用次数会一直为2147483647，而其他的类型或者不在该范围内的数据则会返回具体的引用次数&lt;/p&gt;

&lt;p&gt;为什么 Redis 不共享包含字符串的对象？
当服务器考虑将一个共享对象设置为键的值对象时， 程序需要先检查给定的共享对象和键想创建的目标对象是否完全相同， 只有在共享对象和目标对象完全相同的情况下， 程序才会将共享对象用作键的值对象， 而一个共享对象保存的值越复杂， 验证共享对象和目标对象是否相同所需的复杂度就会越高， 消耗的 CPU 时间也会越多：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果共享对象是保存整数值的字符串对象， 那么验证操作的复杂度为 O(1) ；&lt;/li&gt;
  &lt;li&gt;如果共享对象是保存字符串值的字符串对象， 那么验证操作的复杂度为 O(N) ；&lt;/li&gt;
  &lt;li&gt;如果共享对象是包含了多个值（或者对象的）对象， 比如列表对象或者哈希对象， 那么验证操作的复杂度将会是 O(N^2) 。
因此， 尽管共享更复杂的对象可以节约更多的内存， 但受到 CPU 时间的限制， Redis 只对包含整数值的字符串对象进行共享。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了前面介绍过的 type 、 encoding 、 ptr 和 refcount 四个属性之外， redisObject 结构包含的最后一个属性为 lru 属性， 该属性记录了对象最后一次被命令程序访问的时间：&lt;/p&gt;

&lt;p&gt;typedef struct redisObject {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ...

unsigned lru:22;

// ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;} robj;&lt;/p&gt;

&lt;p&gt;OBJECT IDLETIME 命令可以打印出给定键的空转时长， 这一空转时长就是通过将当前时间减去键的值对象的 lru 时间计算得出的：
redis&amp;gt; SET msg “hello world”
OK&lt;/p&gt;

&lt;h1 id=&quot;等待一小段时间&quot;&gt;等待一小段时间&lt;/h1&gt;
&lt;p&gt;redis&amp;gt; OBJECT IDLETIME msg
(integer) 20&lt;/p&gt;

&lt;h1 id=&quot;等待一阵子&quot;&gt;等待一阵子&lt;/h1&gt;
&lt;p&gt;redis&amp;gt; OBJECT IDLETIME msg
(integer) 180&lt;/p&gt;

&lt;h1 id=&quot;访问-msg-键的值&quot;&gt;访问 msg 键的值&lt;/h1&gt;
&lt;p&gt;redis&amp;gt; GET msg
“hello world”&lt;/p&gt;

&lt;h1 id=&quot;键处于活跃状态空转时长为-0&quot;&gt;键处于活跃状态，空转时长为 0&lt;/h1&gt;
&lt;p&gt;redis&amp;gt; OBJECT IDLETIME msg
(integer) 0&lt;/p&gt;

&lt;p&gt;除了可以被 OBJECT IDLETIME 命令打印出来之外， 键的空转时长还有另外一项作用： 如果服务器打开了 maxmemory 选项， 并且服务器用于回收内存的算法为 volatile-lru 或者 allkeys-lru ， 那么当服务器占用的内存数超过了 maxmemory 选项所设置的上限值时， 空转时长较高的那部分键会优先被服务器释放， 从而回收内存。
配置文件的 maxmemory 选项和 maxmemory-policy 选项的说明介绍了关于这方面的更多信息。&lt;/p&gt;

</description>
        <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
        
        <category>博客</category>
        
        
      </item>
    
  </channel>
</rss>
